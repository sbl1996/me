{"version":3,"sources":["history.ts","layouts/Header.tsx","layouts/Sidebar.tsx","layouts/Layout.tsx","api/post.ts","components/CodeBlock.tsx","PostView.tsx","PostList.tsx","PostListView.tsx","PostListQueryView.tsx","PostForm.tsx","PostCreateView.tsx","PostEditView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createBrowserHistory","Header","useState","query","setQuery","Navbar","bg","variant","expand","collapseOnSelect","Toggle","aria-controls","Container","Collapse","id","Nav","className","Link","as","to","target","href","rel","Form","inline","onSubmit","event","preventDefault","history","push","FormControl","type","placeholder","name","onChange","value","Button","Sidebar","ListGroup","ListGroupItem","Layout","children","Row","Col","sm","getPostByID","a","axios","rep","data","getPostByTitle","title","searchPosts","q","url","titles","getPostTitlesByYear","year","getPosts","SyntaxHighlighter","registerLanguage","python","CodeBlock","language","style","docco","PostView","date","useParams","useAsync","loading","post","undefined","content","Spinner","animation","role","moment","format","source","renderers","code","PostList","map","key","PostListView","PostListQueryView","props","param","fn","PostForm","action","dateStr","method","console","log","Group","Control","defaultValue","Label","rows","PostCreateView","PostEditView","found","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PACeA,gBC0CAC,EAtCA,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACXC,EADW,KACJC,EADI,KAWnB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,KAAKC,kBAAgB,GAC7D,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,0BAC7B,kBAACC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAI,uBAAGH,UAAU,gBAAxC,SACA,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,UAAS,uBAAGH,UAAU,mBAA7C,SACA,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,SAAQ,uBAAGH,UAAU,kBAA5C,SACA,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAG,IAAIE,OAAO,SAASC,KAAK,6BAA6BF,GAAG,IAAIG,IAAI,uBAAsB,uBAClGN,UAAU,kBADZ,UAGF,kBAACD,EAAA,EAAD,KACE,kBAACQ,EAAA,EAAD,CAAMC,QAAM,EAACC,SAjBF,SAACC,GACpBA,EAAMC,iBACNC,EAAQC,KAAK,iBAAmB1B,KAgBtB,kBAAC2B,EAAA,EAAD,CAAaC,KAAK,SAASC,YAAY,GAAGC,KAAK,IAAIjB,UAAU,UAChDkB,SAxBJ,SAACR,GACpBA,EAAMC,iBAENvB,EAASsB,EAAMN,OAAOe,QAsBCA,MAAOhC,IAEpB,kBAACiC,EAAA,EAAD,CAAQL,KAAK,UAAb,gB,iBClBCM,EAZC,WACd,OACE,yBAAKrB,UAAU,WACb,uCACA,kBAACsB,EAAA,EAAD,CAAW/B,QAAQ,SACjB,kBAACgC,EAAA,EAAD,KAAe,kBAAC,IAAD,CAAMpB,GAAG,oBAAT,SACf,kBAACoB,EAAA,EAAD,KAAe,kBAAC,IAAD,CAAMpB,GAAG,oBAAT,YCeRqB,EAlBwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,OACI,6BACE,kBAAC,EAAD,MACA,kBAAC7B,EAAA,EAAD,CAAWI,UAAU,OACnB,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACLH,GAEJ,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,W,0DCbDC,EAAW,uCAAG,WAAO/B,GAAP,eAAAgC,EAAA,sEACPC,IAChB,gBAAkBjC,GAFK,cACnBkC,EADmB,yBAIlBA,EAAIC,MAJc,2CAAH,sDAOXC,EAAc,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACVC,IAChB,mBAAqBI,GAFK,cACtBH,EADsB,yBAIrBA,EAAIC,MAJiB,2CAAH,sDAOdG,EAAW,uCAAG,WAAOC,GAAP,iBAAAP,EAAA,sEACPC,IAAM,CACtBO,IAAK,gBAAkBD,IAFA,cACnBL,EADmB,OAIrBO,EAAS,GACI,OAAbP,EAAIC,OACNM,EAASP,EAAIC,MANU,kBAQlBM,GARkB,2CAAH,sDAWXC,EAAmB,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sEACfC,IAAM,CACtBO,IAAK,mBAAqBG,IAFK,cAC3BT,EAD2B,yBAI1BA,EAAIC,MAJsB,2CAAH,sDAOnBS,EAAQ,uCAAG,4BAAAZ,EAAA,sEACJC,IAAM,CACtBO,IAAK,eAFe,cAChBN,EADgB,yBAIfA,EAAIC,MAJW,2CAAH,qD,0CC5BrBU,IAAkBC,iBAAiB,SAAUC,KAO7C,IAQeC,EAR6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAU5B,EAAY,EAAZA,MACvD,OACE,kBAAC,IAAD,CAAmB4B,SAAUA,EAAUC,MAAOC,KAC3C9B,I,iBCqBQ+B,EA9BE,WAAO,IAILC,EAHVhB,EAASiB,cAATjB,MADc,EAEKkB,aAAS,kBAAMnB,EAAeC,KAAQ,CAACA,IAAzDF,EAFa,EAEbA,KAAMqB,EAFO,EAEPA,QACRC,OAAgBC,IAATvB,EAAqB,CAACE,MAAO,YAAasB,QAAS,GAAIN,UAAMK,GAAavB,EAKvF,OACE,6BAEIqB,EACE,kBAACI,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAM5D,UAAU,WAAhB,eAGF,6BACE,4BAAKuD,EAAKpB,OACV,iCAbWqB,KADJL,EAcKI,EAAKJ,MAbMU,MAAWA,IAAOV,IACxCW,OAAO,kBAaR,6BACA,kBAAC,IAAD,CACEC,OAAQR,EAAKE,QACbO,UAAW,CAACC,KAAMnB,QCVjBoB,EAd4B,SAAC,GAAgB,IAAd3B,EAAa,EAAbA,OAC5C,OACE,4BACGA,EAAO4B,KAAI,SAAChC,GAAD,OACV,yBAAKnC,UAAU,OAAOoE,IAAKjC,GACzB,kBAAC,IAAD,CAAMhC,GAAI,SAAWgC,GACnB,4BAAKA,UCUFkC,EAjBM,WAAO,IAAD,EACChB,YAASX,GAA3BT,EADiB,EACjBA,KAAMqB,EADW,EACXA,QACRf,OAAkBiB,IAATvB,EAAqB,GAAKA,EACzC,OACE,6BAEIqB,EACE,kBAACI,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAM5D,UAAU,WAAhB,eAGF,kBAAC,EAAD,CAAUuC,OAAQA,MCiBb+B,EAnBW,SAACC,GAAkB,IACtCC,EAAaD,EAAbC,MAAOC,EAAMF,EAANE,GACKtD,EAAUiC,cAAlBoB,GAFiC,EAGhBnB,aAAS,kBAAMoB,EAAGtD,KAAQ,CAACA,IAA7Cc,EAHkC,EAGlCA,KAAMqB,EAH4B,EAG5BA,QACRf,OAAkBiB,IAATvB,EAAqB,GAAKA,EACzC,OACE,6BAEIqB,EACE,kBAACI,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAM5D,UAAU,WAAhB,eAGF,kBAAC,EAAD,CAAUuC,OAAQA,MCoBbmC,EAlCmB,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,OAAQ7E,EAA8B,EAA9BA,GAAIqC,EAA0B,EAA1BA,MAAOsB,EAAmB,EAAnBA,QAASN,EAAU,EAAVA,KAC9DhB,EAAQA,GAAS,GACjBsB,EAAUA,GAAW,GACrB,IAAMmB,EAAUzB,EAAOU,IAAOV,GAAMW,OAAO,oBAAsBD,MAASC,OAAO,oBAIjF,OACE,kBAACvD,EAAA,EAAD,CAAMoE,OAAQA,EAAQE,OAAO,OAAOjB,KAAK,OAAOnD,SAJ7B,SAACC,GACpBoE,QAAQC,IAAIrE,EAAMN,eAKPoD,IAAP1D,EACE,kBAACS,EAAA,EAAKyE,MAAN,CAAYhF,UAAU,UACpB,kBAACO,EAAA,EAAK0E,QAAN,CAAclE,KAAK,SAASE,KAAK,KAAKiE,aAAcpF,KAGtD,GAEJ,kBAACS,EAAA,EAAKyE,MAAN,KACE,kBAACzE,EAAA,EAAK4E,MAAN,cACA,kBAAC5E,EAAA,EAAK0E,QAAN,CAAclE,KAAK,OAAOE,KAAK,QAAQiE,aAAc/C,KAEvD,kBAAC5B,EAAA,EAAKyE,MAAN,KACE,kBAACzE,EAAA,EAAK4E,MAAN,gBACA,kBAAC5E,EAAA,EAAK0E,QAAN,CAAc/E,GAAG,WAAWe,KAAK,UAAUmE,KAAK,KAAKF,aAAczB,KAErE,kBAAClD,EAAA,EAAKyE,MAAN,KACE,kBAACzE,EAAA,EAAK4E,MAAN,aACA,kBAAC5E,EAAA,EAAK0E,QAAN,CAAclE,KAAK,iBAAiBE,KAAK,OAAOiE,aAAcN,KAEhE,kBAACxD,EAAA,EAAD,CAAQ7B,QAAQ,UAAUwB,KAAK,UAA/B,YC9BSsE,EATkB,WAC/B,OACE,6BACE,wCACA,kBAAC,EAAD,CAAUV,OAAO,gBC0CRW,EA1CM,WAAO,IAITnC,EAHVrD,EAAMsD,cAANtD,GADkB,EAEOuD,aAAS,kBAAMxB,EAAY/B,KAAK,CAACA,IAAnDyD,EAFW,EAEjBtB,KAAYqB,EAFK,EAELA,QACdiC,OAAiB/B,IAATD,EAQd,OACE,6BAEID,EACE,kBAACI,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAM5D,UAAU,WAAhB,eAIAuF,EACE,6BACE,yCACA,kBAAC,EAAD,CACEZ,OAAO,mBACP7E,GAAIA,EACJqC,MAAK,OAAEoB,QAAF,IAAEA,OAAF,EAAEA,EAAMpB,MACbsB,QAAO,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAME,QACfN,KAAI,OAAEI,QAAF,IAAEA,OAAF,EAAEA,EAAMJ,QAIhB,6BACE,4BAAK,aACL,2BA7BRA,EACKU,IAAOV,GAAMW,OAAO,oBAEpBD,MAASC,OAAO,qBCmDd0B,EAxDH,WACV,OAEE,kBAAC,IAAD,CAAQ5E,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6E,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,KACE,sCAGJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,KACE,sCAGJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,qBAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElB,MAAM,OACNC,GAAIjC,MAIV,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,oBAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElB,MAAM,IACNC,GAAIrC,MAIV,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,kBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,WC/CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.09574172.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, {FormEvent, useState} from 'react';\nimport {Container, Form, Nav, Navbar, FormControl, Button} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport history from \"../history\";\n\nconst Header = () => {\n  const [ query, setQuery ] = useState(\"\");\n  const handleChange = (event: FormEvent) => {\n    event.preventDefault();\n    // @ts-ignore\n    setQuery(event.target.value)\n  }\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    history.push(\"/posts/search/\" + query)\n  }\n  return (\n    <Navbar bg=\"light\" variant=\"light\" expand=\"md\" collapseOnSelect>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n      <Container>\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\"><i className=\"fas fa-home\"/> Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/posts\"><i className=\"fas fa-feather\"/> Post</Nav.Link>\n            <Nav.Link as={Link} to=\"/demo\"><i className=\"fas fa-rocket\"/> Demo</Nav.Link>\n            <Nav.Link as=\"a\" target=\"_blank\" href=\"https://github.com/sbl1996\" to=\"/\" rel=\"noopener noreferrer\"><i\n              className=\"fab fa-github\"/> Code</Nav.Link>\n          </Nav>\n          <Nav>\n            <Form inline onSubmit={handleSubmit}>\n              <FormControl type=\"search\" placeholder=\"\" name=\"q\" className=\"mr-md-2\"\n                           onChange={handleChange}\n                           value={query}\n              />\n              <Button type=\"submit\">Search</Button>\n            </Form>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport {ListGroupItem, ListGroup} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\n\nconst Sidebar = () => {\n  return (\n    <div className=\"sidebar\">\n      <h5>Archive</h5>\n      <ListGroup variant=\"flush\">\n        <ListGroupItem><Link to=\"/posts/year/2020\">2020</Link></ListGroupItem>\n        <ListGroupItem><Link to=\"/posts/year/2019\">2019</Link></ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, {FunctionComponent} from 'react';\nimport '../App.css';\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\n\n\nconst Layout: FunctionComponent<any> = ({ children }) => {\n  return (\n      <div>\n        <Header/>\n        <Container className=\"p-4\">\n          <Row>\n            <Col sm={8}>\n              { children }\n            </Col>\n            <Col sm={4}>\n              <Sidebar/>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n  );\n};\n\nexport default Layout;\n","import axios from 'axios'\nimport {Post} from \"../models/post\";\n\n\nexport const getPostByID = async (id: string): Promise<Post> => {\n  const rep = await axios(\n    '/api/post?id=' + id,\n  )\n  return rep.data\n}\n\nexport const getPostByTitle = async (title: string): Promise<Post> => {\n  const rep = await axios(\n    '/api/post?title=' + title,\n  )\n  return rep.data\n}\n\nexport const searchPosts = async (q: string): Promise<Array<string>> => {\n  const rep = await axios({\n    url: '/api/posts?q=' + q,\n  })\n  let titles = []\n  if (rep.data !== null) {\n    titles = rep.data\n  }\n  return titles\n}\n\nexport const getPostTitlesByYear = async (year: string): Promise<Array<string>> => {\n  const rep = await axios({\n    url: '/api/posts?year=' + year,\n  })\n  return rep.data\n}\n\nexport const getPosts = async (): Promise<Array<string>> => {\n  const rep = await axios({\n    url: '/api/posts',\n  })\n  return rep.data\n}","import React, {FunctionComponent} from \"react\";\n// @ts-ignore\nimport {Light as SyntaxHighlighter} from 'react-syntax-highlighter';\n// @ts-ignore\nimport docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco';\n// @ts-ignore\nimport python from 'react-syntax-highlighter/dist/esm/languages/hljs/python'\n\nSyntaxHighlighter.registerLanguage('python', python)\n\ntype Props = {\n  language: string,\n  value: string,\n}\n\nconst CodeBlock: FunctionComponent<Props> = ({ language, value }) => {\n  return (\n    <SyntaxHighlighter language={language} style={docco}>\n      {value}\n    </SyntaxHighlighter>\n  );\n}\n\nexport default CodeBlock;","import React from 'react';\nimport Markdown from 'react-markdown';\nimport {getPostByTitle} from \"./api/post\";\nimport moment from \"moment\";\nimport CodeBlock from \"./components/CodeBlock\";\nimport {useParams} from \"react-router-dom\";\nimport {useAsync} from \"@umijs/hooks\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst PostView = () => {\n  const {title} = useParams<{title: string}>()\n  const { data, loading } = useAsync(() => getPostByTitle(title), [title])\n  const post = data === undefined ? {title: \"Not Found\", content: \"\", date: undefined} : data;\n  const fmtDate = (date?: Date) => {\n    const m = date === undefined ? moment() : moment(date)\n    return m.format(\"MMMM DD, YYYY\")\n  }\n  return (\n    <div>\n      {\n        loading ?\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          <div>\n            <h1>{post.title}</h1>\n            <p>{fmtDate(post.date)}</p>\n            <hr/>\n            <Markdown\n              source={post.content}\n              renderers={{code: CodeBlock}}\n            />\n          </div>\n      }\n    </div>\n  );\n};\n\nexport default PostView;\n","import React, {FunctionComponent} from 'react';\nimport {Link} from \"react-router-dom\";\n\ntype Props = {\n  titles: Array<string>,\n}\n\nconst PostList: FunctionComponent<Props> = ({ titles }) => {\n  return (\n    <ul>\n      {titles.map((title) =>\n        <div className=\"item\" key={title}>\n          <Link to={\"/post/\" + title}>\n            <h5>{title}</h5>\n          </Link>\n        </div>\n      )}\n    </ul>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport PostList from \"./PostList\";\nimport {useAsync} from \"@umijs/hooks\";\nimport {Spinner} from \"react-bootstrap\";\nimport {getPosts} from \"./api/post\";\n\nconst PostListView = () => {\n  const { data, loading } = useAsync(getPosts)\n  const titles = data === undefined ? [] : data\n  return (\n    <div>\n      {\n        loading ?\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          <PostList titles={titles}/>\n      }\n    </div>\n  );\n};\n\nexport default PostListView;\n","import React from 'react';\nimport PostList from \"./PostList\";\nimport {useParams} from \"react-router-dom\";\nimport {useAsync} from \"@umijs/hooks\";\nimport {Spinner} from \"react-bootstrap\";\n\ntype Props<Result = any> = {\n  param: string,\n  fn: (...args: any[]) => Promise<Result>\n}\n\ntype Params = {\n  [param: string]: string\n}\n\nconst PostListQueryView = (props: Props) => {\n  let {param, fn} = props\n  const { [param]: value } = useParams<Params>()\n  const { data, loading } = useAsync(() => fn(value), [value])\n  const titles = data === undefined ? [] : data\n  return (\n    <div>\n      {\n        loading ?\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          <PostList titles={titles}/>\n      }\n    </div>\n  );\n};\n\nexport default PostListQueryView;\n","import React, {FormEvent} from \"react\";\nimport moment from \"moment\";\nimport {Button, Form} from \"react-bootstrap\";\nimport history from \"./history\";\n\ntype Props = {\n  action: string,\n  id?: string,\n  title?: string,\n  content?: string,\n  date?: Date,\n}\n\n\nconst PostForm: React.FC<Props> = ({action, id, title, content, date}) => {\n  title = title || \"\"\n  content = content || \"\"\n  const dateStr = date ? moment(date).format(\"YYYY-MM-DDTHH:mm\") : moment().format(\"YYYY-MM-DDTHH:mm\")\n  const handleSubmit = (event: FormEvent) => {\n    console.log(event.target)\n  }\n  return (\n    <Form action={action} method=\"POST\" role=\"form\" onSubmit={handleSubmit}>\n      {\n        id !== undefined ?\n          <Form.Group className=\"d-none\">\n            <Form.Control type=\"number\" name=\"id\" defaultValue={id}/>\n          </Form.Group>\n          :\n          ''\n      }\n      <Form.Group>\n        <Form.Label>Title</Form.Label>\n        <Form.Control type=\"text\" name=\"title\" defaultValue={title}/>\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>Content</Form.Label>\n        <Form.Control as=\"textarea\" name=\"content\" rows=\"10\" defaultValue={content}/>\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>Date</Form.Label>\n        <Form.Control type=\"datetime-local\" name=\"date\" defaultValue={dateStr}/>\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n\nexport default PostForm","import React from \"react\";\nimport PostForm from \"./PostForm\";\n\n\nconst PostCreateView: React.FC = () => {\n  return (\n    <div>\n      <h3>New Post</h3>\n      <PostForm action=\"/api/post\" />\n    </div>\n  )\n}\n\nexport default PostCreateView","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\nimport moment from \"moment\";\nimport {useParams} from \"react-router-dom\";\nimport {useAsync} from \"@umijs/hooks\";\nimport {getPostByID} from \"./api/post\";\nimport PostForm from \"./PostForm\";\n\nconst PostEditView = () => {\n  const {id} = useParams<{id: string}>()\n  const { data: post, loading } = useAsync(() => getPostByID(id), [id])\n  const found = post !== undefined\n  const fmtDate = (date?: Date) => {\n    if (date) {\n      return moment(date).format(\"YYYY-MM-DDTHH:mm\")\n    } else {\n      return moment().format(\"MMMM DD, YYYY\")\n    }\n  }\n  return (\n    <div>\n      {\n        loading ?\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          :\n          (\n            found ?\n              <div>\n                <h3>Edit Post</h3>\n                <PostForm\n                  action=\"/api/post/update\"\n                  id={id!}\n                  title={post?.title!}\n                  content={post?.content!}\n                  date={post?.date!}\n                />\n              </div>\n              :\n              <div>\n                <h1>{\"Not Found\"}</h1>\n                <p>{fmtDate()}</p>\n              </div>\n          )\n      }\n    </div>\n  )\n}\n\nexport default PostEditView","import React from 'react';\nimport {Router, Switch, Route} from \"react-router-dom\";\nimport Layout from \"./layouts/Layout\";\nimport PostView from \"./PostView\";\nimport PostListView from './PostListView';\nimport PostListQueryView from './PostListQueryView';\nimport history from \"./history\";\nimport {getPostTitlesByYear, searchPosts} from \"./api/post\";\nimport PostCreateView from \"./PostCreateView\";\nimport PostEditView from \"./PostEditView\";\n\nconst App = () => {\n  return (\n    // @ts-ignore\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Layout>\n            <h5>Home</h5>\n          </Layout>\n        </Route>\n        <Route exact path=\"/demo\">\n          <Layout>\n            <h5>Demo</h5>\n          </Layout>\n        </Route>\n        <Route exact path=\"/posts\">\n          <Layout>\n            <PostListView/>\n          </Layout>\n        </Route>\n        <Route exact path=\"/posts/year/:year\">\n          <Layout>\n            <PostListQueryView\n              param=\"year\"\n              fn={getPostTitlesByYear}\n            />\n          </Layout>\n        </Route>\n        <Route exact path=\"/posts/search/:q\">\n          <Layout>\n            <PostListQueryView\n              param=\"q\"\n              fn={searchPosts}\n            />\n          </Layout>\n        </Route>\n        <Route exact path=\"/post/new\">\n          <Layout>\n            <PostCreateView/>\n          </Layout>\n        </Route>\n        <Route path=\"/post/edit/:id\">\n          <Layout>\n            <PostEditView/>\n          </Layout>\n        </Route>\n        <Route path=\"/post/:title\">\n          <Layout>\n            <PostView/>\n          </Layout>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this models and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}